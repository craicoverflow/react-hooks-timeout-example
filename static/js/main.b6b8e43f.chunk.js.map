{"version":3,"sources":["Alert.js","App.js","serviceWorker.js","index.js"],"names":["Alert","_ref","visible","duration","onDurationEnd","children","_useState","useState","_useState2","Object","slicedToArray","isVisible","setVisibility","useEffect","setTimeout","propTypes","PropTypes","bool","isRequired","timeout","number","node","App","setAlertVisibility","_useState3","_useState4","setDuration","react_default","a","createElement","className","value","type","onChange","e","val","target","parseInt","onClick","Alert_Alert","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAWaA,EAAQ,SAAAC,GAAoD,IAAjDC,EAAiDD,EAAjDC,QAASC,EAAwCF,EAAxCE,SAAUC,EAA8BH,EAA9BG,cAAeC,EAAeJ,EAAfI,SAAeC,EACpCC,mBAAS,MAD2BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChEK,EADgEH,EAAA,GACrDI,EADqDJ,EAAA,GAOvE,OAJAK,oBAAU,WACRD,EAAcV,IACb,CAACA,IAECS,GAEDR,GACFW,WAAW,WACTF,GAAc,GAEVR,GACFA,GAAc,IAEfD,GAGEE,GAZgB,MAezBL,EAAMe,UAAY,CAChBb,QAASc,IAAUC,KAAKC,WACxBC,QAASH,IAAUI,OACnBf,SAAUW,IAAUK,KAAKH,YChC3B,IAgCeI,EAhCH,WAAM,IAAAhB,EACsBC,oBAAS,GAD/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTJ,EADSM,EAAA,GACAe,EADAf,EAAA,GAAAgB,EAEgBjB,mBAAS,KAFzBkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAETrB,EAFSsB,EAAA,GAECC,EAFDD,EAAA,GAIhB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SACEE,MAAO5B,EACP6B,KAAK,OACLC,SAAU,SAAAC,GACR,IAAMC,EAAMD,EAAEE,OAAOL,OAAS,EAC9BL,EAAYW,SAASF,QAI3BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMf,GAAmB,KAA1C,eAEFI,EAAAC,EAAAC,cAACU,EAAD,CACErC,QAASA,EACTC,SAAUA,EACVC,cAAemB,GAEfI,EAAAC,EAAAC,cAAA,uCAA+B1B,EAA/B,SCjBUqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6b8e43f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Customisable alert component that remains hidden until called.\n *\n * @param {boolean} props.visible - The current visibility of the component.\n * @param {number} [props.duration] - The time in milliseconds to display the component for. If not set, the component will stay open.\n * @param {func} onDurationEnd - Set visible state of component from parent.\n * @param {*} props.children - Child components.\n */\nexport const Alert = ({ visible, duration, onDurationEnd, children }) => {\n  const [isVisible, setVisibility] = useState(null);\n\n  useEffect(() => {\n    setVisibility(visible);\n  }, [visible]);\n\n  if (!isVisible) return null;\n\n  if (duration) {\n    setTimeout(() => {\n      setVisibility(false);\n\n      if (onDurationEnd) {\n        onDurationEnd(false);\n      }\n    }, duration);\n  }\n\n  return children;\n};\n\nAlert.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  timeout: PropTypes.number,\n  children: PropTypes.node.isRequired\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Alert } from \"./Alert\";\n\nconst App = () => {\n  const [visible, setAlertVisibility] = useState(false);\n  const [duration, setDuration] = useState(1000);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"input-wrapper\">\n          <input\n            value={duration}\n            type=\"text\"\n            onChange={e => {\n              const val = e.target.value || 0;\n              setDuration(parseInt(val));\n            }}\n          />\n        </div>\n        <div className=\"button-wrapper\">\n          <button onClick={() => setAlertVisibility(true)}>Show Alert</button>\n        </div>\n        <Alert\n          visible={visible}\n          duration={duration}\n          onDurationEnd={setAlertVisibility}\n        >\n          <div>Alert timeout is set to [{duration}]</div>\n        </Alert>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}